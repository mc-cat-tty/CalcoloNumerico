img = imread("ref.jpeg");
img1D1 = imread("d1_1.jpeg") - img;
img2D1 = imread("d1_1.jpeg") - img;
imgD2 = imread("d2.jpeg") - img;
imgs = {img1D1(:, : , 1), img2D1(:, :, 1), imgD2(:, :, 1)}; % filter red channel
l = length(imgs);
figure(1);

dftImgs = cell(1, l);

for i=1:l
    dftImg = fftshift(ifft2(cell2mat(imgs(i))));
    realDftImg = real(dftImg);
    dftImgs{i} = realDftImg;
end

Rs = zeros(1, l);
for i=1:l
    Rs(i) = max(cell2mat(dftImgs(i)), [], 'all');
end
R = max(Rs);
c = 255 / log(1 + abs(R));


for i=1:l
    realDftImg = cell2mat(dftImgs(i));
    logCompressedDft = c * log(1 + abs(realDftImg));
    
    subplot(2, l, i);
    imshow(logCompressedDft);
    
    subplot(2, l, i+l);
    imshow(cell2mat(imgs(i)));

    % 2D gaussian fitting
    [h, w] = size(logCompressedDft);
    s = min(size(logCompressedDft));
    lb = [0, -s/2, 0, -s/2, 0, -pi/4];
    ub = [255, s/2, (s/2)^2, s/2, (s/2)^2, pi/4];
    x0 = [1,0,50,0,50,0];
    xdata = zeros(h, w, 2);
    [X,Y] = meshgrid(-h/2:w/2);
    X
    xdata(:, :, 1) = X;
    ydata(:, :, 1) = Y;
    Z = D2GaussFunctionRot(x,xdata);
    [x, resnorm, residual, exitflag] = lsqcurvefit(@gauss2d_params, x0, xdata, logCompressedDft, lb, ub);
    params = x;
    x
    resnorm
    exitflag
end

% Visualize DFT surface and gaussian 2D surface
% figure(2);
% f = @(x, y) gauss2d(params(1), params(2), params(3), params(4), params(5), x, y);
% fsurf(f, [-20, 20]);
% figure(3);
% surf(logCompressedDft);